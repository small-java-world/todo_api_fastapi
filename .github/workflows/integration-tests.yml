name: Integration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-xdist

    - name: Set up test environment
      run: |
        echo "DATABASE_URL=sqlite:///./test.db" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "API_TITLE=TODO API Test" >> $GITHUB_ENV
        echo "API_VERSION=1.0.0" >> $GITHUB_ENV
        echo "CAS_ROOT_PATH=./test_blobs" >> $GITHUB_ENV
        echo "FILE_STORAGE_ROOT=./test_storage" >> $GITHUB_ENV
        echo "GIT_REPO_PATH=./test_git_repo" >> $GITHUB_ENV

    - name: Create test directories
      run: |
        mkdir -p test_blobs test_storage test_git_repo

    - name: Create database tables
      run: |
        python -c "
        from app.core.database import engine, Base
        Base.metadata.create_all(bind=engine)
        print('Database tables created successfully')
        "

    - name: Run database migrations
      run: |
        alembic upgrade head || echo "Migration failed, but continuing..."

    - name: Run integration tests
      run: |
        pytest tests/test_*_integration.py -v --cov=app --cov-report=xml --cov-report=html --junitxml=integration-test-results.xml

    - name: Run specific integration test categories
      run: |
        echo "Running enhanced integration tests..."
        pytest tests/test_integration_enhanced.py -v
        
        echo "Running CAS Git integration tests..."
        pytest tests/test_integration_cas_git.py -v
        
        echo "Running TDD workflow integration tests..."
        pytest tests/test_integration_tdd_workflow.py -v
        
        echo "Running storage management integration tests..."
        pytest tests/test_integration_storage_management.py -v
        
        echo "Running backup integration tests..."
        pytest tests/test_backup_integration.py -v

    - name: Run hierarchical structure integration tests
      run: |
        pytest tests/test_hierarchical_structure.py -v

    - name: Run review management integration tests
      run: |
        pytest tests/test_review_management.py -v

    - name: Run updated_at management integration tests
      run: |
        pytest tests/test_updated_at_management.py -v

    - name: Run all integration tests summary
      run: |
        pytest tests/test_*_integration.py --collect-only -q | grep -c "test session starts" || echo "No integration tests found"

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: integration
        name: codecov-integration
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results-${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml
          integration-test-results.xml
          .pytest_cache/

    - name: Comment PR with integration test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          // Create comment
          const comment = `## ðŸ”— Integration Test Results
          
          **Python Version**: ${{ matrix.python-version }}
          **Status**: ${{ job.status }}
          
          ### Test Summary
          - All integration tests have been executed
          - Coverage report generated
          - Test results uploaded as artifacts
          
          ### Coverage
          Coverage report is available in the artifacts section.
          
          ### Next Steps
          - Review any failing tests
          - Check integration test coverage
          - Update tests if needed`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
