name: CI - Unit Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11, 3.12]

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov

    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=sqlite:///./test.db" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "API_TITLE=TODO API Test" >> $GITHUB_ENV
        echo "API_VERSION=1.0.0" >> $GITHUB_ENV
        echo "CAS_ROOT_PATH=./test_blobs" >> $GITHUB_ENV
        echo "FILE_STORAGE_ROOT=./test_storage" >> $GITHUB_ENV
        echo "GIT_REPO_PATH=./test_git_repo" >> $GITHUB_ENV

    - name: Run database migrations
      run: |
        alembic upgrade head

    - name: Run unit tests
      run: |
        pytest tests/test_*_ut.py -v --cov=app --cov-report=xml --cov-report=html

    - name: Run integration tests
      run: |
        pytest tests/test_*_integration.py -v

    - name: Run backup tests
      run: |
        pytest tests/test_backup_*.py -v

    - name: Run review tests
      run: |
        pytest tests/test_review_*.py -v

    - name: Run hierarchical tests
      run: |
        pytest tests/test_hierarchical_*.py -v

    - name: Run artifact tests
      run: |
        pytest tests/test_*artifact*.py -v

    - name: Run storage tests
      run: |
        pytest tests/test_storage_*.py -v

    - name: Run TDD hook tests
      run: |
        pytest tests/test_*tdd*.py -v

    - name: Run git service tests
      run: |
        pytest tests/test_git_*.py -v

    - name: Run config tests
      run: |
        pytest tests/test_config_*.py -v

    - name: Run enhanced task service tests
      run: |
        pytest tests/test_enhanced_*.py -v

    - name: Run updated_at tests
      run: |
        pytest tests/test_updated_at_*.py -v

    - name: Run concurrent operation tests
      run: |
        pytest tests/test_concurrent_*.py -v

    - name: Run error case tests
      run: |
        pytest tests/test_error_*.py -v

    - name: Run status transition tests
      run: |
        pytest tests/test_status_*.py -v

    - name: Run navigation tests
      run: |
        pytest tests/test_*navigation*.py -v

    - name: Run search filter tests
      run: |
        pytest tests/test_*search*.py -v

    - name: Run comments history tests
      run: |
        pytest tests/test_*comments*.py -v

    - name: Run tree API tests
      run: |
        pytest tests/test_tree_*.py -v

    - name: Run CAS artifacts tests
      run: |
        pytest tests/test_cas_*.py -v

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml
          .pytest_cache/

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy bandit

    - name: Run flake8
      run: |
        flake8 app/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run black
      run: |
        black --check app/ tests/

    - name: Run isort
      run: |
        isort --check-only app/ tests/

    - name: Run mypy
      run: |
        mypy app/ --ignore-missing-imports

    - name: Run bandit
      run: |
        bandit -r app/ -f json -o bandit-report.json || true

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install security dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety

    - name: Run safety check
      run: |
        safety check --json --output safety-report.json || true

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t todo-api:latest .

    - name: Test Docker image
      run: |
        docker run --rm todo-api:latest python -c "from app.main import app; print('Application imports successfully')"
